name: Bun app

on:
  push:
    paths:
      - 'app_bun/**'
      - '.github/workflows/build-bun.yaml'

jobs:
  build:

    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      # Checkout and set up Bun
      - uses: actions/checkout@v4
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.11
          
      # Install dependencies
      - name: Install dependencies
        run: bun install
        working-directory: app_bun

      # Run tests
      - name: Run tests
        run: bun test
        working-directory: app_bun 

      # Run tslint
      - name: Run tslint
        run: bun run tslint -c tslint.json "*.ts"
        working-directory: app_bun
        continue-on-error: true

  security:
    
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      # Checkout and set up Bun
      - uses: actions/checkout@v4
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.11
      - run: bun install # Installation is cached by default
        working-directory: app_bun

      # Cache Snyk
      - name: Cache Snyk binary
        id: cache-snyk
        uses: actions/cache@v3
        env:
          cache-name: cache-snyk
        with:
          path: app_bun/snyk-linux
          key: ${{ runner.os }}-snyk-${{ hashFiles('app_bun/snyk-linux') }}
          restore-keys: |
            ${{ runner.os }}-snyk-
            ${{ runner.os }}-

      # Download Snyk
      - name: Download Snyk binary
        if: steps.cache-snyk.outputs.cache-hit != 'true'
        run: |
          curl -LO https://github.com/snyk/cli/releases/download/v1.1278.0/snyk-linux
          chmod +x snyk-linux
        working-directory: app_bun
      
      # Run Snyk
      - name: Run Snyk
        run: ./snyk-linux test --severity-threshold=high
        working-directory: app_bun
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker:

    runs-on: ubuntu-22.04
    timeout-minutes: 5

    needs:
      - security
      - build
    if: ${{ needs.security.result == 'success'  && needs.build.result == 'success'}}
    
    steps:
      # Checkout and set up Bun
      - uses: actions/checkout@v4
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.11
      - run: bun install # Installation is required to get .lockb file
        working-directory: app_bun

      
      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push the image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app_bun
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app_bun:latest